library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity gfinv is
  port (
  	-- Inputs
  	clk : in std_logic;
  	rst : in std_logic;
  	operand : in std_logic_vector(7 downto 0);
	
	-- Outputs
	rslt : out std_logic_vector(7 downto 0));
end entity ; -- gfinv

architecture rtl of gfinv is

	signal a : std_logic_vector(7 downto 0);
	signal b : std_logic_vector(7 downto 0);
	signal q : std_logic_vector(7 downto 0);
	--signal r : std_logic_vector(7 downto 0);

	signal r1 : std_logic_vector(7 downto 0);
	signal r2 : std_logic_vector(7 downto 0);
	signal r_prev : std_logic_vector(7 downto 0);

	component lpm_divide_ip is
		port (
			--Inputs
			denom		: in std_logic_vector(7 downto 0);
			numer		: in std_logic_vector(7 downto 0);
			
			--Outputs
			quotient		: out std_logic_vector(7 downto 0);
			remain		: out std_logic_vector(7 downto 0));
	end component lpm_divide_ip;

	type std_logic_vector_array_div_vals is array (19 downto 0) of std_logic_vector(7 downto 0);
	
	signal denoms : std_logic_vector_array_div_vals;
	signal numers : std_logic_vector_array_div_vals;
	signal quotients : std_logic_vector_array_div_vals;
	signal remains : std_logic_vector_array_div_vals;
	signal r : std_logic_vector_array_div_vals;


begin

	generate_divs : for i in 0 to 19 generate
		lpm_divide_ip_q : lpm_divide_ip
		port map(
			denom=>denoms(i),
			numer=>numers(i),
			quotient=>quotients(i),
			remain=>remains(i));
	end generate generate_divs;

	process(clk,rst) is
	begin
		if rst = '0' then
			rslt <= (others=>'0');
		elsif clk'event and clk = '1' then
						
			--r <= a - (q)*b;

			--r_prev <= std_logic_vector(unsigned(a) - (unsigned(q)*unsigned(b))); 

			--r2 <= b - ()*r1;

			--r <= 

			--r_prev <= r;

			--r(0) <=  std_logic_vector( unsigned(numers(0)) - ( unsigned(quotients(0)) * unsigned(denoms(0)) ) );

			denoms(0)<=std_logic_vector(to_unsigned(23,a'length));
			numers(0)<=std_logic_vector(to_unsigned(120,b'length));

			numers(1)<=std_logic_vector(to_unsigned(23,a'length));
			denoms(1)<=remains(0);

			numers(2)<=remains(0);
			denoms(2)<=remains(1);

			numers(3)<=remains(1);
			denoms(3)<=remains(2);

			numers(4)<=remains(2);
			denoms(4)<=remains(3);

			numers(5)<=remains(3);
			denoms(5)<=remains(4);

			numers(6)<=remains(4);
			denoms(6)<=remains(5);

			a <= "100011011";
			b <= shift_left(unsigned("001101011") , 2);

		end if;
	end process;

end architecture ; -- rtl