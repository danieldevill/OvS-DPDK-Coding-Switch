// mm.v

// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module mm (
		input  wire        clk_clk,                             //                  clk.clk
		input  wire        master_read_control_fixed_location,  //  master_read_control.fixed_location
		input  wire [31:0] master_read_control_read_base,       //                     .read_base
		input  wire [31:0] master_read_control_read_length,     //                     .read_length
		input  wire        master_read_control_go,              //                     .go
		output wire        master_read_control_done,            //                     .done
		output wire        master_read_control_early_done,      //                     .early_done
		input  wire        master_read_user_read_buffer,        //     master_read_user.read_buffer
		output wire [31:0] master_read_user_buffer_output_data, //                     .buffer_output_data
		output wire        master_read_user_data_available,     //                     .data_available
		input  wire        master_write_control_fixed_location, // master_write_control.fixed_location
		input  wire [31:0] master_write_control_write_base,     //                     .write_base
		input  wire [31:0] master_write_control_write_length,   //                     .write_length
		input  wire        master_write_control_go,             //                     .go
		output wire        master_write_control_done,           //                     .done
		input  wire        master_write_user_write_buffer,      //    master_write_user.write_buffer
		input  wire [31:0] master_write_user_buffer_input_data, //                     .buffer_input_data
		output wire        master_write_user_buffer_full,       //                     .buffer_full
		input  wire        reset_reset_n                        //                reset.reset_n
	);

	wire  [31:0] master_read_avalon_master_readdata;               // mm_interconnect_0:master_read_avalon_master_readdata -> master_read:master_readdata
	wire         master_read_avalon_master_waitrequest;            // mm_interconnect_0:master_read_avalon_master_waitrequest -> master_read:master_waitrequest
	wire  [31:0] master_read_avalon_master_address;                // master_read:master_address -> mm_interconnect_0:master_read_avalon_master_address
	wire         master_read_avalon_master_read;                   // master_read:master_read -> mm_interconnect_0:master_read_avalon_master_read
	wire   [3:0] master_read_avalon_master_byteenable;             // master_read:master_byteenable -> mm_interconnect_0:master_read_avalon_master_byteenable
	wire         master_read_avalon_master_readdatavalid;          // mm_interconnect_0:master_read_avalon_master_readdatavalid -> master_read:master_readdatavalid
	wire         master_write_avalon_master_waitrequest;           // mm_interconnect_0:master_write_avalon_master_waitrequest -> master_write:master_waitrequest
	wire  [31:0] master_write_avalon_master_address;               // master_write:master_address -> mm_interconnect_0:master_write_avalon_master_address
	wire   [3:0] master_write_avalon_master_byteenable;            // master_write:master_byteenable -> mm_interconnect_0:master_write_avalon_master_byteenable
	wire         master_write_avalon_master_write;                 // master_write:master_write -> mm_interconnect_0:master_write_avalon_master_write
	wire  [31:0] master_write_avalon_master_writedata;             // master_write:master_writedata -> mm_interconnect_0:master_write_avalon_master_writedata
	wire         mm_interconnect_0_onchip_memory2_0_s1_chipselect; // mm_interconnect_0:onchip_memory2_0_s1_chipselect -> onchip_memory2_0:chipselect
	wire  [31:0] mm_interconnect_0_onchip_memory2_0_s1_readdata;   // onchip_memory2_0:readdata -> mm_interconnect_0:onchip_memory2_0_s1_readdata
	wire   [7:0] mm_interconnect_0_onchip_memory2_0_s1_address;    // mm_interconnect_0:onchip_memory2_0_s1_address -> onchip_memory2_0:address
	wire   [3:0] mm_interconnect_0_onchip_memory2_0_s1_byteenable; // mm_interconnect_0:onchip_memory2_0_s1_byteenable -> onchip_memory2_0:byteenable
	wire         mm_interconnect_0_onchip_memory2_0_s1_write;      // mm_interconnect_0:onchip_memory2_0_s1_write -> onchip_memory2_0:write
	wire  [31:0] mm_interconnect_0_onchip_memory2_0_s1_writedata;  // mm_interconnect_0:onchip_memory2_0_s1_writedata -> onchip_memory2_0:writedata
	wire         mm_interconnect_0_onchip_memory2_0_s1_clken;      // mm_interconnect_0:onchip_memory2_0_s1_clken -> onchip_memory2_0:clken
	wire         rst_controller_reset_out_reset;                   // rst_controller:reset_out -> [master_read:reset, master_write:reset, mm_interconnect_0:master_read_clock_reset_reset_reset_bridge_in_reset_reset, onchip_memory2_0:reset, rst_translator:in_reset]
	wire         rst_controller_reset_out_reset_req;               // rst_controller:reset_req -> [onchip_memory2_0:reset_req, rst_translator:reset_req_in]

	custom_master #(
		.MASTER_DIRECTION    (0),
		.DATA_WIDTH          (32),
		.ADDRESS_WIDTH       (32),
		.BURST_CAPABLE       (0),
		.MAXIMUM_BURST_COUNT (2),
		.BURST_COUNT_WIDTH   (2),
		.FIFO_DEPTH          (256),
		.FIFO_DEPTH_LOG2     (8),
		.MEMORY_BASED_FIFO   (1)
	) master_read (
		.clk                     (clk_clk),                                 //       clock_reset.clk
		.reset                   (rst_controller_reset_out_reset),          // clock_reset_reset.reset
		.master_address          (master_read_avalon_master_address),       //     avalon_master.address
		.master_read             (master_read_avalon_master_read),          //                  .read
		.master_byteenable       (master_read_avalon_master_byteenable),    //                  .byteenable
		.master_readdata         (master_read_avalon_master_readdata),      //                  .readdata
		.master_readdatavalid    (master_read_avalon_master_readdatavalid), //                  .readdatavalid
		.master_waitrequest      (master_read_avalon_master_waitrequest),   //                  .waitrequest
		.control_fixed_location  (master_read_control_fixed_location),      //           control.export
		.control_read_base       (master_read_control_read_base),           //                  .export
		.control_read_length     (master_read_control_read_length),         //                  .export
		.control_go              (master_read_control_go),                  //                  .export
		.control_done            (master_read_control_done),                //                  .export
		.control_early_done      (master_read_control_early_done),          //                  .export
		.user_read_buffer        (master_read_user_read_buffer),            //              user.export
		.user_buffer_output_data (master_read_user_buffer_output_data),     //                  .export
		.user_data_available     (master_read_user_data_available),         //                  .export
		.master_write            (),                                        //       (terminated)
		.master_writedata        (),                                        //       (terminated)
		.master_burstcount       (),                                        //       (terminated)
		.control_write_base      (32'b00000000000000000000000000000000),    //       (terminated)
		.control_write_length    (32'b00000000000000000000000000000000),    //       (terminated)
		.user_write_buffer       (1'b0),                                    //       (terminated)
		.user_buffer_input_data  (32'b00000000000000000000000000000000),    //       (terminated)
		.user_buffer_full        ()                                         //       (terminated)
	);

	custom_master #(
		.MASTER_DIRECTION    (1),
		.DATA_WIDTH          (32),
		.ADDRESS_WIDTH       (32),
		.BURST_CAPABLE       (0),
		.MAXIMUM_BURST_COUNT (2),
		.BURST_COUNT_WIDTH   (2),
		.FIFO_DEPTH          (256),
		.FIFO_DEPTH_LOG2     (8),
		.MEMORY_BASED_FIFO   (1)
	) master_write (
		.clk                     (clk_clk),                                //       clock_reset.clk
		.reset                   (rst_controller_reset_out_reset),         // clock_reset_reset.reset
		.master_address          (master_write_avalon_master_address),     //     avalon_master.address
		.master_write            (master_write_avalon_master_write),       //                  .write
		.master_byteenable       (master_write_avalon_master_byteenable),  //                  .byteenable
		.master_writedata        (master_write_avalon_master_writedata),   //                  .writedata
		.master_waitrequest      (master_write_avalon_master_waitrequest), //                  .waitrequest
		.control_fixed_location  (master_write_control_fixed_location),    //           control.export
		.control_write_base      (master_write_control_write_base),        //                  .export
		.control_write_length    (master_write_control_write_length),      //                  .export
		.control_go              (master_write_control_go),                //                  .export
		.control_done            (master_write_control_done),              //                  .export
		.user_write_buffer       (master_write_user_write_buffer),         //              user.export
		.user_buffer_input_data  (master_write_user_buffer_input_data),    //                  .export
		.user_buffer_full        (master_write_user_buffer_full),          //                  .export
		.master_read             (),                                       //       (terminated)
		.master_readdata         (32'b00000000000000000000000000000000),   //       (terminated)
		.master_readdatavalid    (1'b0),                                   //       (terminated)
		.master_burstcount       (),                                       //       (terminated)
		.control_read_base       (32'b00000000000000000000000000000000),   //       (terminated)
		.control_read_length     (32'b00000000000000000000000000000000),   //       (terminated)
		.control_early_done      (),                                       //       (terminated)
		.user_read_buffer        (1'b0),                                   //       (terminated)
		.user_buffer_output_data (),                                       //       (terminated)
		.user_data_available     ()                                        //       (terminated)
	);

	mm_onchip_memory2_0 onchip_memory2_0 (
		.clk        (clk_clk),                                          //   clk1.clk
		.address    (mm_interconnect_0_onchip_memory2_0_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_onchip_memory2_0_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_onchip_memory2_0_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_onchip_memory2_0_s1_write),      //       .write
		.readdata   (mm_interconnect_0_onchip_memory2_0_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_onchip_memory2_0_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_onchip_memory2_0_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),                   // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req),               //       .reset_req
		.freeze     (1'b0)                                              // (terminated)
	);

	mm_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                                             (clk_clk),                                          //                                           clk_0_clk.clk
		.master_read_clock_reset_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                   // master_read_clock_reset_reset_reset_bridge_in_reset.reset
		.master_read_avalon_master_address                         (master_read_avalon_master_address),                //                           master_read_avalon_master.address
		.master_read_avalon_master_waitrequest                     (master_read_avalon_master_waitrequest),            //                                                    .waitrequest
		.master_read_avalon_master_byteenable                      (master_read_avalon_master_byteenable),             //                                                    .byteenable
		.master_read_avalon_master_read                            (master_read_avalon_master_read),                   //                                                    .read
		.master_read_avalon_master_readdata                        (master_read_avalon_master_readdata),               //                                                    .readdata
		.master_read_avalon_master_readdatavalid                   (master_read_avalon_master_readdatavalid),          //                                                    .readdatavalid
		.master_write_avalon_master_address                        (master_write_avalon_master_address),               //                          master_write_avalon_master.address
		.master_write_avalon_master_waitrequest                    (master_write_avalon_master_waitrequest),           //                                                    .waitrequest
		.master_write_avalon_master_byteenable                     (master_write_avalon_master_byteenable),            //                                                    .byteenable
		.master_write_avalon_master_write                          (master_write_avalon_master_write),                 //                                                    .write
		.master_write_avalon_master_writedata                      (master_write_avalon_master_writedata),             //                                                    .writedata
		.onchip_memory2_0_s1_address                               (mm_interconnect_0_onchip_memory2_0_s1_address),    //                                 onchip_memory2_0_s1.address
		.onchip_memory2_0_s1_write                                 (mm_interconnect_0_onchip_memory2_0_s1_write),      //                                                    .write
		.onchip_memory2_0_s1_readdata                              (mm_interconnect_0_onchip_memory2_0_s1_readdata),   //                                                    .readdata
		.onchip_memory2_0_s1_writedata                             (mm_interconnect_0_onchip_memory2_0_s1_writedata),  //                                                    .writedata
		.onchip_memory2_0_s1_byteenable                            (mm_interconnect_0_onchip_memory2_0_s1_byteenable), //                                                    .byteenable
		.onchip_memory2_0_s1_chipselect                            (mm_interconnect_0_onchip_memory2_0_s1_chipselect), //                                                    .chipselect
		.onchip_memory2_0_s1_clken                                 (mm_interconnect_0_onchip_memory2_0_s1_clken)       //                                                    .clken
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
