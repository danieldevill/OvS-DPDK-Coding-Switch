// q_sys_mm_interconnect_3.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module q_sys_mm_interconnect_3 (
		input  wire         pcie_cv_hip_avmm_0_coreclkout_clk,                         //                       pcie_cv_hip_avmm_0_coreclkout.clk
		input  wire         master_read_clock_reset_reset_reset_bridge_in_reset_reset, // master_read_clock_reset_reset_reset_bridge_in_reset.reset
		input  wire [31:0]  master_read_avalon_master_address,                         //                           master_read_avalon_master.address
		output wire         master_read_avalon_master_waitrequest,                     //                                                    .waitrequest
		input  wire [3:0]   master_read_avalon_master_byteenable,                      //                                                    .byteenable
		input  wire         master_read_avalon_master_read,                            //                                                    .read
		output wire [31:0]  master_read_avalon_master_readdata,                        //                                                    .readdata
		output wire         master_read_avalon_master_readdatavalid,                   //                                                    .readdatavalid
		output wire [4:0]   onchip_memory2_0_s2_address,                               //                                 onchip_memory2_0_s2.address
		output wire         onchip_memory2_0_s2_write,                                 //                                                    .write
		input  wire [127:0] onchip_memory2_0_s2_readdata,                              //                                                    .readdata
		output wire [127:0] onchip_memory2_0_s2_writedata,                             //                                                    .writedata
		output wire [15:0]  onchip_memory2_0_s2_byteenable,                            //                                                    .byteenable
		output wire         onchip_memory2_0_s2_chipselect,                            //                                                    .chipselect
		output wire         onchip_memory2_0_s2_clken                                  //                                                    .clken
	);

	wire          master_read_avalon_master_translator_avalon_universal_master_0_waitrequest;   // master_read_avalon_master_agent:av_waitrequest -> master_read_avalon_master_translator:uav_waitrequest
	wire   [31:0] master_read_avalon_master_translator_avalon_universal_master_0_readdata;      // master_read_avalon_master_agent:av_readdata -> master_read_avalon_master_translator:uav_readdata
	wire          master_read_avalon_master_translator_avalon_universal_master_0_debugaccess;   // master_read_avalon_master_translator:uav_debugaccess -> master_read_avalon_master_agent:av_debugaccess
	wire   [31:0] master_read_avalon_master_translator_avalon_universal_master_0_address;       // master_read_avalon_master_translator:uav_address -> master_read_avalon_master_agent:av_address
	wire          master_read_avalon_master_translator_avalon_universal_master_0_read;          // master_read_avalon_master_translator:uav_read -> master_read_avalon_master_agent:av_read
	wire    [3:0] master_read_avalon_master_translator_avalon_universal_master_0_byteenable;    // master_read_avalon_master_translator:uav_byteenable -> master_read_avalon_master_agent:av_byteenable
	wire          master_read_avalon_master_translator_avalon_universal_master_0_readdatavalid; // master_read_avalon_master_agent:av_readdatavalid -> master_read_avalon_master_translator:uav_readdatavalid
	wire          master_read_avalon_master_translator_avalon_universal_master_0_lock;          // master_read_avalon_master_translator:uav_lock -> master_read_avalon_master_agent:av_lock
	wire          master_read_avalon_master_translator_avalon_universal_master_0_write;         // master_read_avalon_master_translator:uav_write -> master_read_avalon_master_agent:av_write
	wire   [31:0] master_read_avalon_master_translator_avalon_universal_master_0_writedata;     // master_read_avalon_master_translator:uav_writedata -> master_read_avalon_master_agent:av_writedata
	wire    [2:0] master_read_avalon_master_translator_avalon_universal_master_0_burstcount;    // master_read_avalon_master_translator:uav_burstcount -> master_read_avalon_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                            // rsp_mux:src_valid -> master_read_avalon_master_agent:rp_valid
	wire  [103:0] rsp_mux_src_data;                                                             // rsp_mux:src_data -> master_read_avalon_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                            // master_read_avalon_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [0:0] rsp_mux_src_channel;                                                          // rsp_mux:src_channel -> master_read_avalon_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                    // rsp_mux:src_startofpacket -> master_read_avalon_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                      // rsp_mux:src_endofpacket -> master_read_avalon_master_agent:rp_endofpacket
	wire  [127:0] onchip_memory2_0_s2_agent_m0_readdata;                                        // onchip_memory2_0_s2_translator:uav_readdata -> onchip_memory2_0_s2_agent:m0_readdata
	wire          onchip_memory2_0_s2_agent_m0_waitrequest;                                     // onchip_memory2_0_s2_translator:uav_waitrequest -> onchip_memory2_0_s2_agent:m0_waitrequest
	wire          onchip_memory2_0_s2_agent_m0_debugaccess;                                     // onchip_memory2_0_s2_agent:m0_debugaccess -> onchip_memory2_0_s2_translator:uav_debugaccess
	wire   [31:0] onchip_memory2_0_s2_agent_m0_address;                                         // onchip_memory2_0_s2_agent:m0_address -> onchip_memory2_0_s2_translator:uav_address
	wire   [15:0] onchip_memory2_0_s2_agent_m0_byteenable;                                      // onchip_memory2_0_s2_agent:m0_byteenable -> onchip_memory2_0_s2_translator:uav_byteenable
	wire          onchip_memory2_0_s2_agent_m0_read;                                            // onchip_memory2_0_s2_agent:m0_read -> onchip_memory2_0_s2_translator:uav_read
	wire          onchip_memory2_0_s2_agent_m0_readdatavalid;                                   // onchip_memory2_0_s2_translator:uav_readdatavalid -> onchip_memory2_0_s2_agent:m0_readdatavalid
	wire          onchip_memory2_0_s2_agent_m0_lock;                                            // onchip_memory2_0_s2_agent:m0_lock -> onchip_memory2_0_s2_translator:uav_lock
	wire  [127:0] onchip_memory2_0_s2_agent_m0_writedata;                                       // onchip_memory2_0_s2_agent:m0_writedata -> onchip_memory2_0_s2_translator:uav_writedata
	wire          onchip_memory2_0_s2_agent_m0_write;                                           // onchip_memory2_0_s2_agent:m0_write -> onchip_memory2_0_s2_translator:uav_write
	wire    [4:0] onchip_memory2_0_s2_agent_m0_burstcount;                                      // onchip_memory2_0_s2_agent:m0_burstcount -> onchip_memory2_0_s2_translator:uav_burstcount
	wire          onchip_memory2_0_s2_agent_rf_source_valid;                                    // onchip_memory2_0_s2_agent:rf_source_valid -> onchip_memory2_0_s2_agent_rsp_fifo:in_valid
	wire  [212:0] onchip_memory2_0_s2_agent_rf_source_data;                                     // onchip_memory2_0_s2_agent:rf_source_data -> onchip_memory2_0_s2_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s2_agent_rf_source_ready;                                    // onchip_memory2_0_s2_agent_rsp_fifo:in_ready -> onchip_memory2_0_s2_agent:rf_source_ready
	wire          onchip_memory2_0_s2_agent_rf_source_startofpacket;                            // onchip_memory2_0_s2_agent:rf_source_startofpacket -> onchip_memory2_0_s2_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s2_agent_rf_source_endofpacket;                              // onchip_memory2_0_s2_agent:rf_source_endofpacket -> onchip_memory2_0_s2_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s2_agent_rsp_fifo_out_valid;                                 // onchip_memory2_0_s2_agent_rsp_fifo:out_valid -> onchip_memory2_0_s2_agent:rf_sink_valid
	wire  [212:0] onchip_memory2_0_s2_agent_rsp_fifo_out_data;                                  // onchip_memory2_0_s2_agent_rsp_fifo:out_data -> onchip_memory2_0_s2_agent:rf_sink_data
	wire          onchip_memory2_0_s2_agent_rsp_fifo_out_ready;                                 // onchip_memory2_0_s2_agent:rf_sink_ready -> onchip_memory2_0_s2_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s2_agent_rsp_fifo_out_startofpacket;                         // onchip_memory2_0_s2_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s2_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s2_agent_rsp_fifo_out_endofpacket;                           // onchip_memory2_0_s2_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s2_agent:rf_sink_endofpacket
	wire          master_read_avalon_master_agent_cp_valid;                                     // master_read_avalon_master_agent:cp_valid -> router:sink_valid
	wire  [103:0] master_read_avalon_master_agent_cp_data;                                      // master_read_avalon_master_agent:cp_data -> router:sink_data
	wire          master_read_avalon_master_agent_cp_ready;                                     // router:sink_ready -> master_read_avalon_master_agent:cp_ready
	wire          master_read_avalon_master_agent_cp_startofpacket;                             // master_read_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          master_read_avalon_master_agent_cp_endofpacket;                               // master_read_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                             // router:src_valid -> cmd_demux:sink_valid
	wire  [103:0] router_src_data;                                                              // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                             // cmd_demux:sink_ready -> router:src_ready
	wire    [0:0] router_src_channel;                                                           // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                     // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                       // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                            // cmd_mux:src_valid -> onchip_memory2_0_s2_cmd_width_adapter:in_valid
	wire  [103:0] cmd_mux_src_data;                                                             // cmd_mux:src_data -> onchip_memory2_0_s2_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                            // onchip_memory2_0_s2_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire    [0:0] cmd_mux_src_channel;                                                          // cmd_mux:src_channel -> onchip_memory2_0_s2_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                    // cmd_mux:src_startofpacket -> onchip_memory2_0_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                      // cmd_mux:src_endofpacket -> onchip_memory2_0_s2_cmd_width_adapter:in_endofpacket
	wire          router_001_src_valid;                                                         // router_001:src_valid -> onchip_memory2_0_s2_rsp_width_adapter:in_valid
	wire  [211:0] router_001_src_data;                                                          // router_001:src_data -> onchip_memory2_0_s2_rsp_width_adapter:in_data
	wire          router_001_src_ready;                                                         // onchip_memory2_0_s2_rsp_width_adapter:in_ready -> router_001:src_ready
	wire    [0:0] router_001_src_channel;                                                       // router_001:src_channel -> onchip_memory2_0_s2_rsp_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                                 // router_001:src_startofpacket -> onchip_memory2_0_s2_rsp_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                                   // router_001:src_endofpacket -> onchip_memory2_0_s2_rsp_width_adapter:in_endofpacket
	wire          onchip_memory2_0_s2_rsp_width_adapter_src_valid;                              // onchip_memory2_0_s2_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [103:0] onchip_memory2_0_s2_rsp_width_adapter_src_data;                               // onchip_memory2_0_s2_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          onchip_memory2_0_s2_rsp_width_adapter_src_ready;                              // rsp_demux:sink_ready -> onchip_memory2_0_s2_rsp_width_adapter:out_ready
	wire    [0:0] onchip_memory2_0_s2_rsp_width_adapter_src_channel;                            // onchip_memory2_0_s2_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          onchip_memory2_0_s2_rsp_width_adapter_src_startofpacket;                      // onchip_memory2_0_s2_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          onchip_memory2_0_s2_rsp_width_adapter_src_endofpacket;                        // onchip_memory2_0_s2_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          onchip_memory2_0_s2_cmd_width_adapter_src_valid;                              // onchip_memory2_0_s2_cmd_width_adapter:out_valid -> agent_pipeline:in_valid
	wire  [211:0] onchip_memory2_0_s2_cmd_width_adapter_src_data;                               // onchip_memory2_0_s2_cmd_width_adapter:out_data -> agent_pipeline:in_data
	wire          onchip_memory2_0_s2_cmd_width_adapter_src_ready;                              // agent_pipeline:in_ready -> onchip_memory2_0_s2_cmd_width_adapter:out_ready
	wire    [0:0] onchip_memory2_0_s2_cmd_width_adapter_src_channel;                            // onchip_memory2_0_s2_cmd_width_adapter:out_channel -> agent_pipeline:in_channel
	wire          onchip_memory2_0_s2_cmd_width_adapter_src_startofpacket;                      // onchip_memory2_0_s2_cmd_width_adapter:out_startofpacket -> agent_pipeline:in_startofpacket
	wire          onchip_memory2_0_s2_cmd_width_adapter_src_endofpacket;                        // onchip_memory2_0_s2_cmd_width_adapter:out_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                                 // agent_pipeline:out_valid -> onchip_memory2_0_s2_agent:cp_valid
	wire  [211:0] agent_pipeline_source0_data;                                                  // agent_pipeline:out_data -> onchip_memory2_0_s2_agent:cp_data
	wire          agent_pipeline_source0_ready;                                                 // onchip_memory2_0_s2_agent:cp_ready -> agent_pipeline:out_ready
	wire    [0:0] agent_pipeline_source0_channel;                                               // agent_pipeline:out_channel -> onchip_memory2_0_s2_agent:cp_channel
	wire          agent_pipeline_source0_startofpacket;                                         // agent_pipeline:out_startofpacket -> onchip_memory2_0_s2_agent:cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                           // agent_pipeline:out_endofpacket -> onchip_memory2_0_s2_agent:cp_endofpacket
	wire          onchip_memory2_0_s2_agent_rp_valid;                                           // onchip_memory2_0_s2_agent:rp_valid -> agent_pipeline_001:in_valid
	wire  [211:0] onchip_memory2_0_s2_agent_rp_data;                                            // onchip_memory2_0_s2_agent:rp_data -> agent_pipeline_001:in_data
	wire          onchip_memory2_0_s2_agent_rp_ready;                                           // agent_pipeline_001:in_ready -> onchip_memory2_0_s2_agent:rp_ready
	wire          onchip_memory2_0_s2_agent_rp_startofpacket;                                   // onchip_memory2_0_s2_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          onchip_memory2_0_s2_agent_rp_endofpacket;                                     // onchip_memory2_0_s2_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                             // agent_pipeline_001:out_valid -> router_001:sink_valid
	wire  [211:0] agent_pipeline_001_source0_data;                                              // agent_pipeline_001:out_data -> router_001:sink_data
	wire          agent_pipeline_001_source0_ready;                                             // router_001:sink_ready -> agent_pipeline_001:out_ready
	wire          agent_pipeline_001_source0_startofpacket;                                     // agent_pipeline_001:out_startofpacket -> router_001:sink_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                                       // agent_pipeline_001:out_endofpacket -> router_001:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                         // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [103:0] cmd_demux_src0_data;                                                          // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                         // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [0:0] cmd_demux_src0_channel;                                                       // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                                 // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                   // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                                   // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [103:0] mux_pipeline_source0_data;                                                    // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                                   // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [0:0] mux_pipeline_source0_channel;                                                 // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                           // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                             // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                         // rsp_demux:src0_valid -> mux_pipeline_001:in_valid
	wire  [103:0] rsp_demux_src0_data;                                                          // rsp_demux:src0_data -> mux_pipeline_001:in_data
	wire          rsp_demux_src0_ready;                                                         // mux_pipeline_001:in_ready -> rsp_demux:src0_ready
	wire    [0:0] rsp_demux_src0_channel;                                                       // rsp_demux:src0_channel -> mux_pipeline_001:in_channel
	wire          rsp_demux_src0_startofpacket;                                                 // rsp_demux:src0_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                   // rsp_demux:src0_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                               // mux_pipeline_001:out_valid -> rsp_mux:sink0_valid
	wire  [103:0] mux_pipeline_001_source0_data;                                                // mux_pipeline_001:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_001_source0_ready;                                               // rsp_mux:sink0_ready -> mux_pipeline_001:out_ready
	wire    [0:0] mux_pipeline_001_source0_channel;                                             // mux_pipeline_001:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_001_source0_startofpacket;                                       // mux_pipeline_001:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                         // mux_pipeline_001:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          onchip_memory2_0_s2_agent_rdata_fifo_src_valid;                               // onchip_memory2_0_s2_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [129:0] onchip_memory2_0_s2_agent_rdata_fifo_src_data;                                // onchip_memory2_0_s2_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          onchip_memory2_0_s2_agent_rdata_fifo_src_ready;                               // avalon_st_adapter:in_0_ready -> onchip_memory2_0_s2_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                // avalon_st_adapter:out_0_valid -> onchip_memory2_0_s2_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_out_0_data;                                                 // avalon_st_adapter:out_0_data -> onchip_memory2_0_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                // onchip_memory2_0_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                // avalon_st_adapter:out_0_error -> onchip_memory2_0_s2_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) master_read_avalon_master_translator (
		.clk                    (pcie_cv_hip_avmm_0_coreclkout_clk),                                            //                       clk.clk
		.reset                  (master_read_clock_reset_reset_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address            (master_read_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (master_read_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (master_read_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (master_read_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (master_read_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (master_read_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (master_read_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (master_read_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (master_read_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (master_read_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (master_read_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (master_read_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (master_read_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (master_read_avalon_master_byteenable),                                         //                          .byteenable
		.av_read                (master_read_avalon_master_read),                                               //                          .read
		.av_readdata            (master_read_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (master_read_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                         //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                         //               (terminated)
		.av_begintransfer       (1'b0),                                                                         //               (terminated)
		.av_chipselect          (1'b0),                                                                         //               (terminated)
		.av_write               (1'b0),                                                                         //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                         //               (terminated)
		.av_lock                (1'b0),                                                                         //               (terminated)
		.av_debugaccess         (1'b0),                                                                         //               (terminated)
		.uav_clken              (),                                                                             //               (terminated)
		.av_clken               (1'b1),                                                                         //               (terminated)
		.uav_response           (2'b00),                                                                        //               (terminated)
		.av_response            (),                                                                             //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid  ()                                                                              //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s2_translator (
		.clk                    (pcie_cv_hip_avmm_0_coreclkout_clk),                         //                      clk.clk
		.reset                  (master_read_clock_reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_0_s2_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s2_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (onchip_memory2_0_s2_agent_m0_read),                         //                         .read
		.uav_write              (onchip_memory2_0_s2_agent_m0_write),                        //                         .write
		.uav_waitrequest        (onchip_memory2_0_s2_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s2_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s2_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s2_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (onchip_memory2_0_s2_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (onchip_memory2_0_s2_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s2_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (onchip_memory2_0_s2_address),                               //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s2_write),                                 //                         .write
		.av_readdata            (onchip_memory2_0_s2_readdata),                              //                         .readdata
		.av_writedata           (onchip_memory2_0_s2_writedata),                             //                         .writedata
		.av_byteenable          (onchip_memory2_0_s2_byteenable),                            //                         .byteenable
		.av_chipselect          (onchip_memory2_0_s2_chipselect),                            //                         .chipselect
		.av_clken               (onchip_memory2_0_s2_clken),                                 //                         .clken
		.av_read                (),                                                          //              (terminated)
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_waitrequest         (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (103),
		.PKT_ORI_BURST_SIZE_L      (101),
		.PKT_RESPONSE_STATUS_H     (100),
		.PKT_RESPONSE_STATUS_L     (99),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (98),
		.PKT_CACHE_L               (95),
		.PKT_THREAD_ID_H           (91),
		.PKT_THREAD_ID_L           (91),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (94),
		.PKT_PROTECTION_L          (92),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (90),
		.PKT_DEST_ID_L             (90),
		.ST_DATA_W                 (104),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) master_read_avalon_master_agent (
		.clk                   (pcie_cv_hip_avmm_0_coreclkout_clk),                                            //       clk.clk
		.reset                 (master_read_clock_reset_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.av_address            (master_read_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (master_read_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (master_read_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (master_read_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (master_read_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (master_read_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (master_read_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (master_read_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (master_read_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (master_read_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (master_read_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (master_read_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (master_read_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (master_read_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (master_read_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (master_read_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                            //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                             //          .data
		.rp_channel            (rsp_mux_src_channel),                                                          //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                    //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                      //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                            //          .ready
		.av_response           (),                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (211),
		.PKT_ORI_BURST_SIZE_L      (209),
		.PKT_RESPONSE_STATUS_H     (208),
		.PKT_RESPONSE_STATUS_L     (207),
		.PKT_BURST_SIZE_H          (190),
		.PKT_BURST_SIZE_L          (188),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (195),
		.PKT_PROTECTION_H          (202),
		.PKT_PROTECTION_L          (200),
		.PKT_BURSTWRAP_H           (187),
		.PKT_BURSTWRAP_L           (187),
		.PKT_BYTE_CNT_H            (186),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (197),
		.PKT_SRC_ID_L              (197),
		.PKT_DEST_ID_H             (198),
		.PKT_DEST_ID_L             (198),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (212),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s2_agent (
		.clk                     (pcie_cv_hip_avmm_0_coreclkout_clk),                         //             clk.clk
		.reset                   (master_read_clock_reset_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s2_agent_m0_address),                      //              m0.address
		.m0_burstcount           (onchip_memory2_0_s2_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s2_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s2_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s2_agent_m0_lock),                         //                .lock
		.m0_readdata             (onchip_memory2_0_s2_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s2_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s2_agent_m0_read),                         //                .read
		.m0_waitrequest          (onchip_memory2_0_s2_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s2_agent_m0_writedata),                    //                .writedata
		.m0_write                (onchip_memory2_0_s2_agent_m0_write),                        //                .write
		.rp_endofpacket          (onchip_memory2_0_s2_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s2_agent_rp_ready),                        //                .ready
		.rp_valid                (onchip_memory2_0_s2_agent_rp_valid),                        //                .valid
		.rp_data                 (onchip_memory2_0_s2_agent_rp_data),                         //                .data
		.rp_startofpacket        (onchip_memory2_0_s2_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),                              //              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),                              //                .valid
		.cp_data                 (agent_pipeline_source0_data),                               //                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),                        //                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),                            //                .channel
		.rf_sink_ready           (onchip_memory2_0_s2_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s2_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s2_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s2_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s2_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (onchip_memory2_0_s2_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s2_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s2_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s2_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s2_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s2_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s2_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s2_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (213),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s2_agent_rsp_fifo (
		.clk               (pcie_cv_hip_avmm_0_coreclkout_clk),                         //       clk.clk
		.reset             (master_read_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_memory2_0_s2_agent_rf_source_data),                  //        in.data
		.in_valid          (onchip_memory2_0_s2_agent_rf_source_valid),                 //          .valid
		.in_ready          (onchip_memory2_0_s2_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (onchip_memory2_0_s2_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s2_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (onchip_memory2_0_s2_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (onchip_memory2_0_s2_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (onchip_memory2_0_s2_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (onchip_memory2_0_s2_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s2_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	q_sys_mm_interconnect_3_router router (
		.sink_ready         (master_read_avalon_master_agent_cp_ready),                  //      sink.ready
		.sink_valid         (master_read_avalon_master_agent_cp_valid),                  //          .valid
		.sink_data          (master_read_avalon_master_agent_cp_data),                   //          .data
		.sink_startofpacket (master_read_avalon_master_agent_cp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (master_read_avalon_master_agent_cp_endofpacket),            //          .endofpacket
		.clk                (pcie_cv_hip_avmm_0_coreclkout_clk),                         //       clk.clk
		.reset              (master_read_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                          //       src.ready
		.src_valid          (router_src_valid),                                          //          .valid
		.src_data           (router_src_data),                                           //          .data
		.src_channel        (router_src_channel),                                        //          .channel
		.src_startofpacket  (router_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                     //          .endofpacket
	);

	q_sys_mm_interconnect_3_router_001 router_001 (
		.sink_ready         (agent_pipeline_001_source0_ready),                          //      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),                          //          .valid
		.sink_data          (agent_pipeline_001_source0_data),                           //          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),                    //          .endofpacket
		.clk                (pcie_cv_hip_avmm_0_coreclkout_clk),                         //       clk.clk
		.reset              (master_read_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                      //       src.ready
		.src_valid          (router_001_src_valid),                                      //          .valid
		.src_data           (router_001_src_data),                                       //          .data
		.src_channel        (router_001_src_channel),                                    //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                 //          .endofpacket
	);

	q_sys_mm_interconnect_3_cmd_demux cmd_demux (
		.clk                (pcie_cv_hip_avmm_0_coreclkout_clk),                         //       clk.clk
		.reset              (master_read_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                          //      sink.ready
		.sink_channel       (router_src_channel),                                        //          .channel
		.sink_data          (router_src_data),                                           //          .data
		.sink_startofpacket (router_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (router_src_valid),                                          //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                      //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                      //          .valid
		.src0_data          (cmd_demux_src0_data),                                       //          .data
		.src0_channel       (cmd_demux_src0_channel),                                    //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                 //          .endofpacket
	);

	q_sys_mm_interconnect_3_cmd_mux cmd_mux (
		.clk                 (pcie_cv_hip_avmm_0_coreclkout_clk),                         //       clk.clk
		.reset               (master_read_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_src_valid),                                         //          .valid
		.src_data            (cmd_mux_src_data),                                          //          .data
		.src_channel         (cmd_mux_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                                //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                                //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                              //          .channel
		.sink0_data          (mux_pipeline_source0_data),                                 //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)                           //          .endofpacket
	);

	q_sys_mm_interconnect_3_cmd_demux rsp_demux (
		.clk                (pcie_cv_hip_avmm_0_coreclkout_clk),                         //       clk.clk
		.reset              (master_read_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (onchip_memory2_0_s2_rsp_width_adapter_src_ready),           //      sink.ready
		.sink_channel       (onchip_memory2_0_s2_rsp_width_adapter_src_channel),         //          .channel
		.sink_data          (onchip_memory2_0_s2_rsp_width_adapter_src_data),            //          .data
		.sink_startofpacket (onchip_memory2_0_s2_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s2_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink_valid         (onchip_memory2_0_s2_rsp_width_adapter_src_valid),           //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                 //          .endofpacket
	);

	q_sys_mm_interconnect_3_rsp_mux rsp_mux (
		.clk                 (pcie_cv_hip_avmm_0_coreclkout_clk),                         //       clk.clk
		.reset               (master_read_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                         //       src.ready
		.src_valid           (rsp_mux_src_valid),                                         //          .valid
		.src_data            (rsp_mux_src_data),                                          //          .data
		.src_channel         (rsp_mux_src_channel),                                       //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),                            //     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),                            //          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),                          //          .channel
		.sink0_data          (mux_pipeline_001_source0_data),                             //          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket)                       //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (100),
		.IN_PKT_RESPONSE_STATUS_L      (99),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (101),
		.IN_PKT_ORI_BURST_SIZE_H       (103),
		.IN_ST_DATA_W                  (104),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (186),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (190),
		.OUT_PKT_BURST_SIZE_L          (188),
		.OUT_PKT_RESPONSE_STATUS_H     (208),
		.OUT_PKT_RESPONSE_STATUS_L     (207),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (192),
		.OUT_PKT_BURST_TYPE_L          (191),
		.OUT_PKT_ORI_BURST_SIZE_L      (209),
		.OUT_PKT_ORI_BURST_SIZE_H      (211),
		.OUT_ST_DATA_W                 (212),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) onchip_memory2_0_s2_cmd_width_adapter (
		.clk                  (pcie_cv_hip_avmm_0_coreclkout_clk),                         //       clk.clk
		.reset                (master_read_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                         //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                       //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                   //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                         //          .ready
		.in_data              (cmd_mux_src_data),                                          //          .data
		.out_endofpacket      (onchip_memory2_0_s2_cmd_width_adapter_src_endofpacket),     //       src.endofpacket
		.out_data             (onchip_memory2_0_s2_cmd_width_adapter_src_data),            //          .data
		.out_channel          (onchip_memory2_0_s2_cmd_width_adapter_src_channel),         //          .channel
		.out_valid            (onchip_memory2_0_s2_cmd_width_adapter_src_valid),           //          .valid
		.out_ready            (onchip_memory2_0_s2_cmd_width_adapter_src_ready),           //          .ready
		.out_startofpacket    (onchip_memory2_0_s2_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (186),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (187),
		.IN_PKT_BURSTWRAP_L            (187),
		.IN_PKT_BURST_SIZE_H           (190),
		.IN_PKT_BURST_SIZE_L           (188),
		.IN_PKT_RESPONSE_STATUS_H      (208),
		.IN_PKT_RESPONSE_STATUS_L      (207),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (192),
		.IN_PKT_BURST_TYPE_L           (191),
		.IN_PKT_ORI_BURST_SIZE_L       (209),
		.IN_PKT_ORI_BURST_SIZE_H       (211),
		.IN_ST_DATA_W                  (212),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (100),
		.OUT_PKT_RESPONSE_STATUS_L     (99),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (101),
		.OUT_PKT_ORI_BURST_SIZE_H      (103),
		.OUT_ST_DATA_W                 (104),
		.ST_CHANNEL_W                  (1),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) onchip_memory2_0_s2_rsp_width_adapter (
		.clk                  (pcie_cv_hip_avmm_0_coreclkout_clk),                         //       clk.clk
		.reset                (master_read_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_001_src_valid),                                      //      sink.valid
		.in_channel           (router_001_src_channel),                                    //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_001_src_ready),                                      //          .ready
		.in_data              (router_001_src_data),                                       //          .data
		.out_endofpacket      (onchip_memory2_0_s2_rsp_width_adapter_src_endofpacket),     //       src.endofpacket
		.out_data             (onchip_memory2_0_s2_rsp_width_adapter_src_data),            //          .data
		.out_channel          (onchip_memory2_0_s2_rsp_width_adapter_src_channel),         //          .channel
		.out_valid            (onchip_memory2_0_s2_rsp_width_adapter_src_valid),           //          .valid
		.out_ready            (onchip_memory2_0_s2_rsp_width_adapter_src_ready),           //          .ready
		.out_startofpacket    (onchip_memory2_0_s2_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (212),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (1),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (pcie_cv_hip_avmm_0_coreclkout_clk),                         //       cr0.clk
		.reset             (master_read_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (onchip_memory2_0_s2_cmd_width_adapter_src_ready),           //     sink0.ready
		.in_valid          (onchip_memory2_0_s2_cmd_width_adapter_src_valid),           //          .valid
		.in_startofpacket  (onchip_memory2_0_s2_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s2_cmd_width_adapter_src_endofpacket),     //          .endofpacket
		.in_data           (onchip_memory2_0_s2_cmd_width_adapter_src_data),            //          .data
		.in_channel        (onchip_memory2_0_s2_cmd_width_adapter_src_channel),         //          .channel
		.out_ready         (agent_pipeline_source0_ready),                              //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                              //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                      //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                        //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                               //          .data
		.out_channel       (agent_pipeline_source0_channel),                            //          .channel
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_error          (1'b0)                                                       // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (212),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (pcie_cv_hip_avmm_0_coreclkout_clk),                         //       cr0.clk
		.reset             (master_read_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (onchip_memory2_0_s2_agent_rp_ready),                        //     sink0.ready
		.in_valid          (onchip_memory2_0_s2_agent_rp_valid),                        //          .valid
		.in_startofpacket  (onchip_memory2_0_s2_agent_rp_startofpacket),                //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s2_agent_rp_endofpacket),                  //          .endofpacket
		.in_data           (onchip_memory2_0_s2_agent_rp_data),                         //          .data
		.out_ready         (agent_pipeline_001_source0_ready),                          //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                          //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),                  //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                    //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                           //          .data
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_channel       (),                                                          // (terminated)
		.in_channel        (1'b0)                                                       // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (104),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (1),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (pcie_cv_hip_avmm_0_coreclkout_clk),                         //       cr0.clk
		.reset             (master_read_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                      //     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                                      //          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                              //          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                //          .endofpacket
		.in_data           (cmd_demux_src0_data),                                       //          .data
		.in_channel        (cmd_demux_src0_channel),                                    //          .channel
		.out_ready         (mux_pipeline_source0_ready),                                //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                                //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),                        //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                          //          .endofpacket
		.out_data          (mux_pipeline_source0_data),                                 //          .data
		.out_channel       (mux_pipeline_source0_channel),                              //          .channel
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_error          (1'b0)                                                       // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (104),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (1),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (pcie_cv_hip_avmm_0_coreclkout_clk),                         //       cr0.clk
		.reset             (master_read_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                      //     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                                      //          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                              //          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                //          .endofpacket
		.in_data           (rsp_demux_src0_data),                                       //          .data
		.in_channel        (rsp_demux_src0_channel),                                    //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                            //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                            //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),                    //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),                      //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                             //          .data
		.out_channel       (mux_pipeline_001_source0_channel),                          //          .channel
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_error          (1'b0)                                                       // (terminated)
	);

	q_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (pcie_cv_hip_avmm_0_coreclkout_clk),                         // in_clk_0.clk
		.in_rst_0_reset (master_read_clock_reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory2_0_s2_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (onchip_memory2_0_s2_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (onchip_memory2_0_s2_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                              //         .error
	);

endmodule
