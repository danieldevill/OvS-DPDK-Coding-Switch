--a_dpfifo ADD_RAM_OUTPUT_REGISTER="ON" ALLOW_RWCYCLE_WHEN_FULL="OFF" DEVICE_FAMILY="Cyclone V" LPM_NUMWORDS=256 LPM_SHOWAHEAD="ON" lpm_width=150 lpm_widthu=8 OVERFLOW_CHECKING="OFF" UNDERFLOW_CHECKING="OFF" aclr clock data empty full q rreq sclr usedw wreq ACF_BLOCK_RAM_AND_MLAB_EQUIVALENT_PAUSED_READ_CAPABILITIES="CARE" CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CYCLONEII_M4K_COMPATIBILITY="ON" LOW_POWER_MODE="AUTO"
--VERSION_BEGIN 18.1 cbx_altdpram 2018:09:12:13:04:09:SJ cbx_altera_counter 2018:09:12:13:04:09:SJ cbx_altera_syncram 2018:09:12:13:04:09:SJ cbx_altera_syncram_nd_impl 2018:09:12:13:04:09:SJ cbx_altsyncram 2018:09:12:13:04:09:SJ cbx_cycloneii 2018:09:12:13:04:09:SJ cbx_fifo_common 2018:09:12:13:04:09:SJ cbx_lpm_add_sub 2018:09:12:13:04:09:SJ cbx_lpm_compare 2018:09:12:13:04:09:SJ cbx_lpm_counter 2018:09:12:13:04:09:SJ cbx_lpm_decode 2018:09:12:13:04:09:SJ cbx_lpm_mux 2018:09:12:13:04:09:SJ cbx_mgl 2018:09:12:14:15:07:SJ cbx_nadder 2018:09:12:13:04:09:SJ cbx_scfifo 2018:09:12:13:04:09:SJ cbx_stratix 2018:09:12:13:04:09:SJ cbx_stratixii 2018:09:12:13:04:09:SJ cbx_stratixiii 2018:09:12:13:04:09:SJ cbx_stratixv 2018:09:12:13:04:09:SJ cbx_util_mgl 2018:09:12:13:04:09:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.


FUNCTION altsyncram_jnn1 (address_a[7..0], address_b[7..0], clock0, clock1, clocken1, data_a[149..0], wren_a)
RETURNS ( q_b[149..0]);
FUNCTION cmpr_7l8 (dataa[7..0], datab[7..0])
RETURNS ( aeb);
FUNCTION cntr_kgb (aclr, clock, cnt_en, sclr)
RETURNS ( q[6..0]);
FUNCTION cntr_1h7 (aclr, clock, cnt_en, sclr, updown)
RETURNS ( q[7..0]);
FUNCTION cntr_lgb (aclr, clock, cnt_en, sclr)
RETURNS ( q[7..0]);

--synthesis_resources = lut 23 M10K 4 reg 39 
SUBDESIGN a_dpfifo_n371
( 
	aclr	:	input;
	clock	:	input;
	data[149..0]	:	input;
	empty	:	output;
	full	:	output;
	q[149..0]	:	output;
	rreq	:	input;
	sclr	:	input;
	usedw[7..0]	:	output;
	wreq	:	input;
) 
VARIABLE 
	FIFOram : altsyncram_jnn1;
	empty_dff : dffe;
	full_dff : dffe;
	low_addressa[7..0] : dffe;
	rd_ptr_lsb : dffe;
	usedw_is_0_dff : dffe;
	usedw_is_1_dff : dffe;
	usedw_is_2_dff : dffe;
	wrreq_delaya[1..0] : dffe;
	almost_full_comparer : cmpr_7l8;
	three_comparison : cmpr_7l8;
	rd_ptr_msb : cntr_kgb;
	usedw_counter : cntr_1h7;
	wr_ptr : cntr_lgb;
	asynch_read_counter_enable	: WIRE;
	empty_out	: WIRE;
	full_out	: WIRE;
	pulse_ram_output	: WIRE;
	ram_read_address[7..0]	: WIRE;
	rd_ptr[7..0]	: WIRE;
	usedw_is_0	: WIRE;
	usedw_is_1	: WIRE;
	usedw_is_2	: WIRE;
	usedw_will_be_0	: WIRE;
	usedw_will_be_1	: WIRE;
	usedw_will_be_2	: WIRE;
	valid_rreq	: WIRE;
	valid_wreq	: WIRE;
	wait_state	: WIRE;

BEGIN 
	FIFOram.address_a[] = wr_ptr.q[];
	FIFOram.address_b[] = ram_read_address[];
	FIFOram.clock0 = clock;
	FIFOram.clock1 = clock;
	FIFOram.clocken1 = pulse_ram_output;
	FIFOram.data_a[] = data[];
	FIFOram.wren_a = valid_wreq;
	empty_dff.clk = clock;
	empty_dff.clrn = (! aclr);
	empty_dff.d = ((! (usedw_will_be_0 # wait_state)) & (! sclr));
	full_dff.clk = clock;
	full_dff.clrn = (! aclr);
	full_dff.d = ((! sclr) & (((valid_wreq & (! valid_rreq)) & almost_full_comparer.aeb) # (full_dff.q & (! (valid_wreq $ valid_rreq)))));
	low_addressa[].clk = clock;
	low_addressa[].clrn = (! aclr);
	low_addressa[].d = ((! sclr) & ((asynch_read_counter_enable & rd_ptr[]) # ((! asynch_read_counter_enable) & low_addressa[].q)));
	rd_ptr_lsb.clk = clock;
	rd_ptr_lsb.clrn = (! aclr);
	rd_ptr_lsb.d = ((! rd_ptr_lsb.q) & (! sclr));
	rd_ptr_lsb.ena = (asynch_read_counter_enable # sclr);
	usedw_is_0_dff.clk = clock;
	usedw_is_0_dff.clrn = (! aclr);
	usedw_is_0_dff.d = (! usedw_will_be_0);
	usedw_is_1_dff.clk = clock;
	usedw_is_1_dff.clrn = (! aclr);
	usedw_is_1_dff.d = usedw_will_be_1;
	usedw_is_2_dff.clk = clock;
	usedw_is_2_dff.clrn = (! aclr);
	usedw_is_2_dff.d = usedw_will_be_2;
	wrreq_delaya[].clk = clock;
	wrreq_delaya[].clrn = (! aclr);
	wrreq_delaya[].d = ( ((! sclr) & valid_wreq), ((! sclr) & wrreq_delaya[1].q));
	almost_full_comparer.dataa[] = B"11111111";
	almost_full_comparer.datab[] = usedw_counter.q[];
	three_comparison.dataa[] = usedw_counter.q[];
	three_comparison.datab[] = B"00000011";
	rd_ptr_msb.aclr = aclr;
	rd_ptr_msb.clock = clock;
	rd_ptr_msb.cnt_en = (asynch_read_counter_enable & (! rd_ptr_lsb.q));
	rd_ptr_msb.sclr = sclr;
	usedw_counter.aclr = aclr;
	usedw_counter.clock = clock;
	usedw_counter.cnt_en = (valid_wreq $ valid_rreq);
	usedw_counter.sclr = sclr;
	usedw_counter.updown = valid_wreq;
	wr_ptr.aclr = aclr;
	wr_ptr.clock = clock;
	wr_ptr.cnt_en = valid_wreq;
	wr_ptr.sclr = sclr;
	asynch_read_counter_enable = pulse_ram_output;
	empty = empty_out;
	empty_out = (! empty_dff.q);
	full = full_out;
	full_out = full_dff.q;
	pulse_ram_output = ((((usedw_is_1 & wrreq_delaya[0].q) # ((usedw_is_2 & wrreq_delaya[1].q) & wrreq_delaya[0].q)) # ((! (usedw_is_1 # usedw_is_2)) & valid_rreq)) # ((usedw_is_2 & (! wrreq_delaya[1].q)) & valid_rreq));
	q[] = FIFOram.q_b[];
	ram_read_address[] = (((! asynch_read_counter_enable) & low_addressa[].q) # (asynch_read_counter_enable & rd_ptr[]));
	rd_ptr[] = ( rd_ptr_msb.q[], (! rd_ptr_lsb.q));
	usedw[] = usedw_counter.q[];
	usedw_is_0 = (! usedw_is_0_dff.q);
	usedw_is_1 = usedw_is_1_dff.q;
	usedw_is_2 = usedw_is_2_dff.q;
	usedw_will_be_0 = (! ((! sclr) & (! (((usedw_is_1 & valid_rreq) & (! valid_wreq)) # (usedw_is_0 & (! (valid_wreq $ valid_rreq)))))));
	usedw_will_be_1 = ((! sclr) & (((usedw_is_1 & (! (valid_wreq $ valid_rreq))) # ((usedw_is_0 & valid_wreq) & (! valid_rreq))) # ((usedw_is_2 & valid_rreq) & (! valid_wreq))));
	usedw_will_be_2 = ((! sclr) & (((usedw_is_2_dff.q & (! (valid_wreq $ valid_rreq))) # ((usedw_is_1 & valid_wreq) & (! valid_rreq))) # ((three_comparison.aeb & valid_rreq) & (! valid_wreq))));
	valid_rreq = rreq;
	valid_wreq = wreq;
	wait_state = ((usedw_will_be_1 & (valid_wreq $ wrreq_delaya[1].q)) # ((usedw_will_be_2 & valid_wreq) & wrreq_delaya[1].q));
END;
--VALID FILE
