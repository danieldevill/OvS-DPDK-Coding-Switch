			r <= std_logic_vector(shift_left(unsigned(b), 2));

			r0 <= a and r(8);
			r1 <= std_logic_vector(shift_left(unsigned(a and r(7)), 1));
			r2 <= std_logic_vector(shift_left(unsigned(a and r(6)), 2));
			r3 <= std_logic_vector(shift_left(unsigned(a and r(5)), 3));
			r4 <= std_logic_vector(shift_left(unsigned(a and r(4)), 4));
			r5 <= std_logic_vector(shift_left(unsigned(a and r(3)), 5));
			r6 <= std_logic_vector(shift_left(unsigned(a and r(2)), 6));
			r7 <= std_logic_vector(shift_left(unsigned(a and r(1)), 7));
			r8 <= std_logic_vector(shift_left(unsigned(a and r(0)), 8));

			r_prev <= r0 xor r1 xor r2 xor r3 xor r4 xor r5 xor r6 xor r7;



			--Load 
			process(clk,rst) is
			begin
				if rst = '0' then
					load_count <= 0;
					complete_count <= 0;
				elsif clk'event and clk = '1' then
					if net_decoder_state = load then
						if load_count = h then
							load_done <= '1';
						else
							load_count <= load_count + 1;
							--Load in pkt32bseg_i to pkt32bseg_data_in
							for i in 0 to 15 loop
								if load_count = i then
									--pkt32bseg_data_in( (7+(32*i)) downto (0+(32*i)) )       <= pkt32bseg_i(7 downto 0);
									--pkt32bseg_data_in( (15+(32*i)) downto (8+(32*i)) )  <= pkt32bseg_i(15 downto 8);
									--pkt32bseg_data_in( (23+(32*i)) downto (16+(32*i)) ) <= pkt32bseg_i(23 downto 16);
									--pkt32bseg_data_in( (31+(32*i)) downto (24+(32*i)) ) <= pkt32bseg_i(31 downto 24);
								end if;
							end loop;
						end if;
					end if;

					if net_decoder_state = complete then

					end if;
				end if;
			end process;

			--FSM
			process(clk,rst) is
			begin
				if rst = '0' then
					net_decoder_state <= load;
				elsif clk'event and clk = '1' then

					case net_decoder_state is
						when idle =>
							if gj_elimination_done = '1' then
								net_decoder_state  <= complete;
							else
								net_decoder_state <= idle;
							end if;
						when load =>
							if load_done = '1' then
								net_decoder_state <= idle;
							end if;
						when complete =>
							if complete_done = '1' then
								net_decoder_state <= idle;
							end if;
					end case;

				end if;
			end process;
