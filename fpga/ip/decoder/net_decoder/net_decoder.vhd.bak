library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity net_decoder is
generic(m : integer := 8;
		h : integer := 7;
		N : integer := 64);
port(
	-- Inputs
	 clk : in std_logic;
	 rst : in std_logic;
	 pkt32bseg_i : in std_logic_vector(31 downto 0); -- 4 byte packet segment input
	 coeffs_in : in std_logic_vector(31 downto 0);

	 -- Outputs
	 pkt32bseg_o : out std_logic_vector(31 downto 0)); -- 4 byte packet segment output

end entity net_decoder;

architecture rtl of net_decoder is

	component gj_elimination is
		generic(m : integer := 8;
				h : integer := 7; 
				N : integer := 64); 
		port (
			-- Inputs
			 clk : in std_logic;
			 rst : in std_logic;
			 pkt32bseg_coef_in : in std_logic_vector(55 downto 0); 
			 pkt32bseg_data_in : in std_logic_vector(511 downto 0); 

			-- Outputs
			pkt32bseg_coef_out : out std_logic_vector(55 downto 0); 
			pkt32bseg_data_out : out std_logic_vector(511 downto 0);
			done_o : out std_logic);
	end component gj_elimination;

	--FSM Signals
	type state is (idle, load, complete);
	signal net_decoder_state : state := idle;
	signal load_count : integer := 0;
	signal complete_count : integer := 0;
	signal load_done : std_logic;
	signal complete_done : std_logic;

	--gj_elimination Signals
	signal pkt32bseg_coef_in : std_logic_vector(55 downto 0);
	signal pkt32bseg_data_in : std_logic_vector(511 downto 0);
	signal pkt32bseg_coef_out : std_logic_vector(55 downto 0);
	signal pkt32bseg_data_out : std_logic_vector(511 downto 0);
	signal gj_elimination_done : std_logic;

begin

	--gj_elimination
	gj_elimination_1 : gj_elimination
	generic map (m => m,
			 h => h,
			 N => N)
	port map (
		clk => clk,
		rst => rst,
		pkt32bseg_coef_in => pkt32bseg_coef_in,
		pkt32bseg_data_in => pkt32bseg_data_in,
		pkt32bseg_coef_out => pkt32bseg_coef_out,
		pkt32bseg_data_out => pkt32bseg_data_out,
		done_o => gj_elimination_done);

	--Load 
	process(clk,rst) is
	begin
		if rst = '0' then
			load_count <= 0;
			complete_count <= 0;
		elsif clk'event and clk = '1' then
		
			if net_decoder_state = load then
				if load_count = 16 then
					load_done <= '1';
				else
					load_count <= load_count + 1;
					--Load in pkt32bseg_i to pkt32bseg_data_in
					for i in 0 to 15 loop
						if load_count = i then
							pkt32bseg_data_in( (7+(32*i)) downto (0+(32*i)) )       <= pkt32bseg_i(7 downto 0);
							pkt32bseg_data_in( (15+(32*i)) downto (8+(32*i)) )  <= pkt32bseg_i(15 downto 8);
							pkt32bseg_data_in( (23+(32*i)) downto (16+(32*i)) ) <= pkt32bseg_i(23 downto 16);
							pkt32bseg_data_in( (31+(32*i)) downto (24+(32*i)) ) <= pkt32bseg_i(31 downto 24);
						end if;
					end loop;
				end if;
			end if;

			if net_decoder_state = complete then
				if complete_count = 16 then
					complete_done <= '1';
				else
					complete_count <= complete_count +1;
					for i in 0 to 15 loop
						if load_count = i then
							pkt32bseg_o(7 downto 0) <= pkt32bseg_data_out( (7+(32*i)) downto (0+(32*i)) );
							pkt32bseg_o(15 downto 8) <= pkt32bseg_data_out( (15+(32*i)) downto (8+(32*i)) );
							pkt32bseg_o(23 downto 16) <= pkt32bseg_data_out( (23+(32*i)) downto (16+(32*i)) );
							pkt32bseg_o(31 downto 24) <= pkt32bseg_data_out( (31+(32*i)) downto (24+(32*i)) );
						end if;
					end loop;
				end if;
			end if;
		end if;
	end process;

	--FSM
	process(clk,rst) is
	begin
		if rst = '0' then
			net_decoder_state <= load;
		elsif clk'event and clk = '1' then

			case net_decoder_state is
				when idle =>
					if gj_elimination_done = '1' then
						net_decoder_state  <= complete;
					else
						net_decoder_state <= idle;
					end if;
				when load =>
					if load_done = '1' then
						net_decoder_state <= idle;
					end if;
				when complete =>
					if complete_done = '1' then
						net_decoder_state <= idle;
					end if;
			end case;

		end if;
	end process;



end architecture ; -- rtl